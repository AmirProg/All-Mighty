#include <iostream>
#include "graphics.hpp"
#include "system.hpp"
#include "physics.hpp"
#include "mapEditor.hpp"

inline void moving(Sprite& A, const TileMap& map, TileMapProperties& tileMapProperties, const Vector2f& mv, Camera& camera) {

    Vector2f previousPos{ A.getPosition().x, A.getPosition().y };

    A.setPosition(Vector2f(A.getPosition().x + mv.x, A.getPosition().y + mv.y));
    camera.move(mv);

    if (Collision::collisionTileState(A, map, tileMapProperties, "SOLID")) {

        A.setPosition(previousPos); // The movement was not valid, go to the previous position
        camera.move(Vector2f(-mv.x, -mv.y));
        std::cout << "SOLID" << std::endl;
    }

    if (Collision::collisionTileState(A, map, tileMapProperties, "WATER"))
        std::cout << "WATER" << std::endl;
}

int main() {

    //MapEditor editor;
    //editor.load();

    /* Camera for the window */

    Camera camera{};

    /*
    * 
    camera.addView(0, sf::View(sf::Vector2f(290, 240), sf::Vector2f(450, 450)));
    camera.addView(1, sf::View(sf::FloatRect(200, 200, 300, 200)));

    camera.setViewType(1, Camera::Type::None);
    
    camera.zoom(1, 3.0f);
    camera.zoom(0, 1.2f);
    
    */

    /* Window and event */

    Window window(Vector2u(600, 600), "Test AM", camera);
    window.create();
    window.setFPSLimit(60);

    Event event;
    InputManager input{ window, event };

    /* Texts */

    Text text{ "All Mighty Engine" };
    text.setFont("ress/arial.ttf");
    text.setColor(Color::Red);
    text.setPosition(Vector2f(120, 250));

    /* Buttons and GUI */

    RectButton button{ "Button 1", Vector2f(200,100), Color::Black };
    button.setOutline(5, Color::White);

    RectButton button2{ button };
    button2.setTextString("Button 2");

    TextBox textBox{ TextBox::Type::Thin };

    GUI gui{ GUI::Style::Center, window };
    gui.add("button", button);
    gui.add("button2", button2);
    gui.add("textBox", textBox);

    /* Map */

    TileMap map{ "ress2/map.txt" };
    map.tileMapping();

    TileMapProperties tileMapProperties{};
    tileMapProperties.addState(0, "SOLID");
    tileMapProperties.addState(1, "SOLID");
    tileMapProperties.addState(14, "SOLID");
    tileMapProperties.addState(15, "WATER");

    /* Sprites and animations */

    SpriteSheet sprite{ "ress/claudius.png", Vector2u(6,4) };
    sprite.setPosition(Vector2f(290, 240));

    Animation animation(sprite);
    animation.setFrame(150);
    animation.setBase(Vector2u(1, 1));

    SpriteSheet sprite2{ "ress/explosion.png", Vector2u(8,4) };
    sprite2.setPosition(Vector2f(200, 300));

    Animation explosion(sprite2);
    explosion.setFrame(50);
    explosion.setBase(Vector2u(-1, -1));

    /* Graphics */

    GraphicManager graphics{};

    graphics.add("perso", sprite);
    graphics.add("text1", text);
    graphics.add("Amap1", map);
    graphics.add("Bgui", gui);

    /* Audio */

    Sound sound{ "ress/explosion.wav" };
    Music music{ "ress/zeldaTheme.flac" };

    AudioManager themes{};
    AudioManager effects{};

    themes.add("mainTheme", music);
    effects.add("explosion", sound);

    /* Game */

    Vector2f mv{};
    std::string currentMap{ "map1" };
    int lineAnim{ 1 };

    themes["mainTheme"].play();
    bool mSwitch{ false };

    while (window.isOpen()) {

        gui.getMovable(input);

        Vector2f spritePosition{ sprite.getBox().x, sprite.getBox().y };
        button2.setSlot([textBox]() { std::cout << "Hello " << textBox.getText() << std::endl; });

        //makeWindowSolid(sprite, window, Vector2f(mv.x,mv.y));

        if (Collision::intersectWindowTop(sprite)) {
            currentMap = "map2";
            sprite.setPosition(Vector2f(300, 450));
        }

        moving(sprite, map, tileMapProperties, mv, camera);

        while (window.isEvent(event)) {

            textBox.manageTextEntered(input, window);

            if (event.close())
                window.close();

            if (input.clickLeft()) {

                if (map.isTile(InputManager::mousePosition(window))) {
                    map.changeTileWithPosition(InputManager::mousePosition(window), 1);
                }

                else if (Collision::intersectMouse(button2, window))
                    themes.stopAll();
            }

            if (button2.isClicked(input, window))
                button2.active();
        }

        if (input.key(InputManager::Key::Down)) {
            mv = Vector2f(0, 3);
            lineAnim = 1;
        }

        if (input.key(InputManager::Key::Right)) {
            mv = Vector2f(3, 0);
            lineAnim = 4;
        }

        if (input.key(InputManager::Key::Left)) {
            mv = Vector2f(-3, 0);
            lineAnim = 3;
        }

        if (input.key(InputManager::Key::Up)) {
            mv = Vector2f(0, -3);
            lineAnim = 2;
        }

        if (input.key(InputManager::Key::Space)) {
            effects["explosion"].play();
            explosion.playAnimation();
        }

        if (input.key(InputManager::Key::M)) {

            if (!mSwitch) {
                camera.setViewType(1, Camera::Type::Minimap);
                mSwitch = true;
            }
            else {
                camera.setViewType(1, Camera::Type::None);
                mSwitch = false;
            }
        }

        if (input.isKeyReleased())
            mv = Vector2f(0, 0);

        animation.playAnimationLine(static_cast<size_t>(lineAnim));

        window.clear();

        window.draw(graphics);

        // Minimap

        /*window.nextView();
        window.draw(map);*/

        window.display();

    }

    return 0;
}